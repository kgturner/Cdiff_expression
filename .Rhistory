intdrNatsum[intdrNatsum$T2eq==TRUE,]$T2DefUp <- FALSE
intdrNatsum$T2DefDn <- intdrNatsum$T2Up#FALSE means down
intdrNatsum[intdrNatsum$T2eq==TRUE,]$T2DefDn <- TRUE
write.table(intdrNatsum, file="sigint_popMeansNE_sumT2droughtNat.txt", sep="\t")
intdrInvsummary <- read.table(file="sigint_popMeans_sumT2droughtInv.txt", header=T)
intdrInvsum <- intdrInvsummary
intdrInvsum$T2eq <- close_enough(intdrInvsum$InvExprValT2, intdrInvsum$InvExprValT0, tolerance=0.1)
intdrInvsum$T2DefUp <- intdrInvsum$T2Up
intdrInvsum[intdrInvsum$T2eq==TRUE,]$T2DefUp <- FALSE
intdrInvsum$T2DefDn <- intdrInvsum$T2Up#FALSE means down
intdrInvsum[intdrInvsum$T2eq==TRUE,]$T2DefDn <- TRUE
write.table(intdrInvsum, file="sigint_popMeansNE_sumT2droughtInv.txt", sep="\t")
summary(indrInvsum)
summary(intdrInvsum)
summary(intdrNatsum)
library(oligo)
?rma()
library(maanova)
biocLite("maanova")
library(maanova)
library(impute)
library(limma)
?rma()
lrtair <- read.table("LRTsandTAIRaccessions.txt", header=T, sep="\t")
sigOT0summaryNE <- read.table(file="sigOrigin_popMeans_sumT0NE.txt", header=T)
head(sigOT0summaryNE)
sigOT0summaryNE <- read.table(file="sigOrigin_popMeans_sumT0NE.txt", header=T)
head(lrtair)
summary(lrtair)
summary(sigOT0summaryNE)
sigOT0tair <- merge(sigOT0summaryNE, lrtair, all.x=TRUE)
head(sigOT0tair)
sigOT0tair$folddiff <- sigOT0tair$NatExprVal/sigOT0tair$InvExprVal
summary(sigOT0tair)
extremefold <- subset(sigOT0tair, folddiff>1.5&folddiff<0.67) #extreme fold difference >1.5 or <.67
extremefold <- subset(sigOT0tair, folddiff>1.5|folddiff<0.67) #extreme fold difference >1.5 or <.67
extremefold
extremefold <- subset(sigOT0tair, folddiff>1.5|folddiff<0.67&TAIRaccessions!%in%"NA,NA") #extreme fold difference >1.5 or <.67
extremefold <- subset(sigOT0tair, folddiff>1.5|folddiff<0.67&TAIRaccessions!=="NA,NA") #extreme fold difference >1.5 or <.67
extremefold <- subset(sigOT0tair, folddiff>1.5|folddiff<0.67&TAIRaccessions!="NA,NA") #extreme fold difference >1.5 or <.67
extremefold
extremefold <- subset(sigOT0tair, folddiff>=1.5|folddiff<=0.67&TAIRaccessions!="NA,NA") #extreme fold difference >1.5 or <.67; #only ones with TAIR accessions:
sigOT0tair$folddiff <- sigOT0tair$InvExprVal/sigOT0tair$NatExprVal #fold differences
extremefold <- subset(sigOT0tair, folddiff>=1.5|folddiff<=0.67&TAIRaccessions!="NA,NA") #extreme fold difference >1.5 or <.67; #only ones with TAIR accessions:
extremefold
extremefold <- subset(sigOT0tair, (folddiff>=1.5|folddiff<=0.67)&TAIRaccessions!="NA,NA") #extreme fold difference >1.5 or <.67; #only ones with TAIR accessions:
extremefold
sigintT2tair <- merge(int2dsummaryNE, lrtair, all.x=TRUE)
int2dsummaryNE <- read.table(file="sigint_popMeans_sumT2droughtNE.txt", header=T)
sigintT2tair <- merge(int2dsummaryNE, lrtair, all.x=TRUE)
sigintT2tair$folddiff <- sigintT2tair$InvExprVal/sigintT2tair$NatExprVal #fold differences
extremefoldT2 <- subset(sigintT2tair, (folddiff>=1.5|folddiff<=0.67)&TAIRaccessions!="NA,NA")
summary(sigintT2tair)
extremefoldT2 <- subset(sigintT2tair, (folddiff>=1.2|folddiff<=0.83)&TAIRaccessions!="NA,NA")
extremefoldT2
summary(sigintT2tair)
extremefoldT2 <- subset(sigintT2tair, (folddiff>=1.2|folddiff<=0.84)&TAIRaccessions!="NA,NA")
extremefold <- subset(sigOT0tair, (folddiff>=1.2|folddiff<=0.84)&TAIRaccessions!="NA,NA")
extremefold
extremefold <- subset(sigOT0tair, (folddiff>=1.5|folddiff<=0.67)&TAIRaccessions!="NA,NA")
extremefold
extremefoldT2
lrtair <- read.table("LRTsandTAIRaccessions.txt", header=T, sep="\t") lrt pvals and tair accessions
lrtair <- read.table("LRTsandTAIRaccessions.txt", header=T, sep="\t") #lrt pvals and tair accessions
sigOT0summaryNE <- read.table(file="sigOrigin_popMeans_sumT0NE.txt", header=T)
sigOT0tair <- merge(sigOT0summaryNE, lrtair, all.x=TRUE)
head(sigOT0tair)
head(sigOT0summaryNE)
head(lrtair)
eth <- subset(sigOT0tair, InvDefDn=T&TAIRaccessions!="NA,NA")
?grepl
for (i in 1:nrow(eth)) {
if (grepl("0007165|0009873|0071369",eth[i,]))
print(eth[i, "column1"])
}
for (i in 1:nrow(eth)) {
if (grepl("0007165|0009873|0071369",eth[i,]))
print(eth[i, ])
}
warnings()
for (i in 1:nrow(eth)) {
#if (grepl("0007165|0009873|0071369",eth[i,]))
print(eth[i, ])
}
for (i in 1:nrow(eth)) {
if (grepl("0007165|0009873|0071369",eth[i,])){
print(eth[i,])}
}
str(eth[1,])
str(eth$GOterms)
for (i in 1:nrow(eth)) {
if (grepl("0007165|0009873|0071369",eth[i,"GOterms"])){
print(eth[i,])}
}
ethsub <- for (i in 1:nrow(eth)) {
if (grepl("0007165|0009873|0071369",eth[i,"GOterms"])){
return(eth[i,])}
}
eth2 <- grep("0007165", eth$GOterms, perl=TRUE, value=FALSE)
eth2
ethsub <- subset(eth, nrow%in%et2)
ethsub <- subset(eth, nrow%in%eth2)
?row
ethsub <- subset(eth, row%in%eth2)
?names
?cols
ethsub <- subset(eth, row.names%in%eth2)
head(row.names(sigOT0tair)
)
ethsub <- subset(eth, row.names(eth)%in%eth2)
ethsub
eth2 <- grep("0009873|0071369", eth$GOterms, perl=TRUE, value=FALSE)
ethsub <- subset(eth, row.names(eth)%in%eth2)
ethsub
head(eth)
eth <- subset(sigOT0tair, InvDefDn=T&TAIRaccessions!="NA,NA")
head(eth)
eth <- subset(sigOT0tair, InvDefDn=="TRUE"&TAIRaccessions!="NA,NA")
head(eth)
eth2 <- grep("0009873|0071369", eth$GOterms, perl=TRUE, value=FALSE)
ethsub <- subset(eth, row.names(eth)%in%eth2)
ethsub
head(sigOT0summaryNE)
eth <- subset(sigOT0tair, InvDefDn=="FALSE"&TAIRaccessions!="NA,NA")
eth2 <- grep("0009873|0071369", eth$GOterms, perl=TRUE, value=FALSE)
ethsub <- subset(eth, row.names(eth)%in%eth2)
ethsub
cp <- subset(sigOT0tair, InvDefUp=="TRUE"&TAIRaccessions!="NA,NA")
cp2 <- grep("0030095|0009654|0009521", cp$GOterms, perl=TRUE, value=FALSE)
cpsub <- subset(cp, row.names(cp)%in%cp2)
cpsub
int2dsummaryNE <- read.table(file="sigint_popMeans_sumT2droughtNE.txt", header=T)
sigintT2tair <- merge(int2dsummaryNE, lrtair, all.x=TRUE)
mtstar <- subset(sigintT2tair, InvDefUp=="TRUE"&TAIRaccessions!="NA,NA")
mtstar2 <- grep("0045039|0090151|0007006|0006626|0070585|0072655|0005740|0005758", mtstar$GOterms, perl=TRUE, value=FALSE)
mtstarsub <- subset(mtstar, row.names(mtstar)%in%mtstar2)
mtstarsub
gly <- subset(sigintT2tair, InvDefDn=="FALSE"&TAIRaccessions!="NA,NA")
gly2 <- grep("0006664|0009247", gly$GOterms, perl=TRUE, value=FALSE)
glysub <- subset(gly, row.names(gly)%in%gly2)
glysub
vac <- subset(sigintT2tair, InvDefDn=="FALSE"&TAIRaccessions!="NA,NA")
vac2 <- grep("0005774|0005773|0044437", vac$GOterms, perl=TRUE, value=FALSE)
vacsub <- subset(vac, row.names(vac)%in%vac2)
vacsub
vac <- subset(sigintT2tair, TAIRaccessions!="NA,NA")
vac2 <- grep("0005774|0005773|0044437", vac$GOterms, perl=TRUE, value=FALSE)
vacsub <- subset(vac, row.names(vac)%in%vac2)
vacsub
vac <- subset(sigintT2tair, InvDefDn=="FALSE"&TAIRaccessions!="NA,NA")
vac
vac2 <- grep("0005774|0005773|0044437", vac$GOterms, perl=TRUE, value=FALSE)
vac
vac <- subset(sigintT2tair, InvDefDn=="FALSE"&TAIRaccessions!="NA,NA")
vac2 <- grep("0005774|0005773|0044437", vac$GOterms, perl=TRUE, value=FALSE)
vac2
vacsub <- subset(vac, row.names(vac)%in%vac2)
vac
head(sigintT2tair)
head(sigOT0tair)
head(vac)
vacsub <- subset(sigintT2tair, row.names(sigintT2tair)%in%vac2)
vac <- subset(sigintT2tair, TAIRaccessions!="NA,NA")
vac2 <- grep("0005774|0005773|0044437", vac$GOterms, perl=TRUE, value=FALSE)
vacsub <- subset(sigintT2tair, row.names(sigintT2tair)%in%vac2)
vacsub
vacsub <- subset(vac, row.names(sigintT2tair)%in%vac2)
vacsub
vac <- subset(sigintT2tair, InvDefDn=="FALSE"&TAIRaccessions!="NA,NA")
vac2 <- grep("0005774|0005773|0044437", vac$GOterms, perl=TRUE, value=FALSE)
vacsub <- subset(sigintT2tair, row.names(sigintT2tair)%in%vac2)
vacsub
View(sigintT2tair)
View(sigintT2tair)
vac <- subset(sigintT2tair, InvDefDn=="FALSE"&TAIRaccessions!="NA,NA")
vac2 <- grep("0005774|0005773|0044437", vac$GOterms, perl=TRUE, value=FALSE)
vacsub <- subset(sigintT2tair, row.names(sigintT2tair)%in%vac2)
vacsub
str(vac)
str(mtstar)
str(mt)
mt <- subset(sigOT0tair, InvDefUp=="TRUE"&TAIRaccessions!="NA,NA")
mt2 <- grep("0030095|0009654|0009521", mt$GOterms, perl=TRUE, value=FALSE)
mtsub <- subset(mt, row.names(mt)%in%mt2)
mtsub
str(mt)
mt2
mtstar2
gly2
vac2
?grep
gly <- subset(sigintT2tair, InvDefDn=="FALSE"&TAIRaccessions!="NA,NA")
gly2 <- grep("0006664|0009247", gly$GOterms, perl=TRUE, value=TRUE)
glysub <- subset(gly, row.names(gly)%in%gly2)
gly2
gly2 <- grep("0006664|0009247", gly$GOterms, perl=TRUE, value=FALSE)
gly2
View(sigintT2tair)
View(gly)
gly <- subset(sigintT2tair, InvDefDn=="FALSE"&TAIRaccessions!="NA,NA")
gly2 <- grep("0006664|0009247", gly$GOterms, perl=TRUE, value=FALSE)
glysub <- subset(gly, row.names%in%gly2)
glysub <- subset(gly, gly$row.names%in%gly2)
glysub
glysub <- subset(gly, row.names(gly)%in%gly2)
glysub
gly <- subset(sigintT2tair, InvDefDn=="FALSE"&TAIRaccessions!="NA,NA")
gly2 <- grep("0006664|0009247", gly$GOterms, perl=TRUE, value=FALSE)
glysub <- subset(gly, row.names(gly)%in%gly2)
glysub
gly2
summary(gly)
head(gly)
gly$InvDefDn <- as.character(gly$InvDefDn)
str(gly)
test <- sigintT2tair
test$InvDefDn <- as.character(test$InvDefDn)
gly <- subset(sigintT2tair, InvDefDn=="FALSE"&TAIRaccessions!="NA,NA")
summary(gly)
summary(sigintT2tair)
gly <- subset(test, InvDefDn=="FALSE"&TAIRaccessions!="NA,NA")
summary(gly)
test$InvDefDn <- as.factor(test$InvDefDn)
gly <- subset(test, InvDefDn=="FALSE"&TAIRaccessions!="NA,NA")
summary(gly)
View(gly)
gly2 <- grep("0006664|0009247", gly$GOterms, perl=TRUE, value=FALSE)
gly2
glysub
str(sigintT2tair)
gly <- subset(sigintT2tair, InvDefDn==FALSE&TAIRaccessions!="NA,NA"&row.names(sigintT2tair)%in%grep("0006664|0009247", gly$GOterms, perl=TRUE, value=FALSE))
sigintT2tair[15,]
glysub <- gly[row.names(gly)%in%gly2,]
glysub
gly[15,]
gly[35,]
gly <- subset(sigintT2tair, InvDefDn==FALSE&TAIRaccessions!="NA,NA")
gly[15,]
gly[35,]
glysub <- gly[row.names(gly)%in%gly2,]
glysub
gly2 <- gly[row.names(gly)%in%grep("0006664|0009247", gly$GOterms, perl=TRUE, value=FALSE),]
gly2
str(gly)
gly2 <- sigintT2tair[row.names(sigintT2tair)%in%grep("0006664|0009247", gly$GOterms, perl=TRUE, value=FALSE),]
gly2
grep("0006664|0009247", gly$GOterms, perl=TRUE, value=FALSE)
gly2 <- gly[row.names(gly)%in%grep("0006664|0009247", gly$GOterms, perl=TRUE, value=FALSE),]
gly2
gly2 <- gly[grep("0006664|0009247", gly$GOterms, perl=TRUE, value=FALSE),]
gly2
mtstar <- subset(sigintT2tair, InvDefUp=="TRUE"&TAIRaccessions!="NA,NA")
mtstar2 <- mstar[grep("0045039|0090151|0007006|0006626|0070585|0072655|0005740|0005758", mtstar$GOterms, perl=TRUE, value=FALSE),]
mtstar2 <- mtstar[grep("0045039|0090151|0007006|0006626|0070585|0072655|0005740|0005758", mtstar$GOterms, perl=TRUE, value=FALSE),]
mtstar2
mt <- subset(sigOT0tair, InvDefUp=="TRUE"&TAIRaccessions!="NA,NA")
mt2 <- mt[grep("0030095|0009654|0009521", mt$GOterms, perl=TRUE, value=FALSE),]
mt2
cp <- subset(sigOT0tair, InvDefUp=="TRUE"&TAIRaccessions!="NA,NA")
cp2 <- cp[grep("0030095|0009654|0009521", cp$GOterms, perl=TRUE, value=FALSE),]
cp2
mt2 <- mt[grep("0007005", mt$GOterms, perl=TRUE, value=FALSE),]
mt2
eth <- subset(sigOT0tair, InvDefDn=="FALSE"&TAIRaccessions!="NA,NA")
eth2 <- eth[grep("0009873|0071369", eth$GOterms, perl=TRUE, value=FALSE),]
eth2
mtstar2
mtstar <- subset(sigintT2tair, InvDefUp==TRUE&TAIRaccessions!="NA,NA")
mtstar2 <- mtstar[grep("0045039|0090151|0007006|0006626|0070585|0072655|0005740|0005758", mtstar$GOterms, perl=TRUE, value=FALSE),]
mtstar2
vac <- subset(sigintT2tair, InvDefDn==FALSE&TAIRaccessions!="NA,NA")
vac2 <- vac[grep("0005774|0005773|0044437", vac$GOterms, perl=TRUE, value=FALSE),]
vac2
test <- read.table("test_lme4dat.txt", header=T, sep="\t")
View(test)
modeldata<-test[!is.na(test$Contig100),]
model1<-lmer(Contig100  ~ Origin*Trt+PC1+ (Tmpt|PopTrtPool)+(1|Pop), family=gaussian,data=modeldata)
library(lme4.0)
model1<-lmer(Contig100  ~ Origin*Trt+PC1+ (Tmpt|PopTrtPool)+(1|Pop), family=gaussian,data=modeldata)
summary(model1)
model2<-lmer(Contig100  ~ Origin+Trt+ PC1 + (Tmpt|PopTrtPool)+(1|Pop), family=gaussian,data=modeldata)
(a1 <- anova(model2,model1)) # is interaction sig?
model3<-lmer(Contig100  ~ Origin+Trt + (Tmpt|PopTrtPool)+(1|Pop), family=gaussian,data=modeldata)
model4 <- lmer(Contig100  ~ Trt+ PC1+(Tmpt|PopTrtPool)+(1|Pop), family=gaussian,data=modeldata)
modeltrt<-lmer(Contig100  ~ Origin+ PC1 + (Tmpt|PopTrtPool)+(1|Pop), family=gaussian,data=modeldata)
(a2 <- anova(model3,model2)) # is covariate sig?
(a3 <- anova(model4, model2)) #is origin sig?
(a4 <- anova(modeltrt, model2)) #is trt sig?
Marchand <- read.table ("nph12818TableS3.txt", header=T, sep="\t")
sigOT0summaryNE <- read.table(file="sigOrigin_popMeans_sumT0NE.txt", header=T)
View(sigOT0summaryNE)
pop <- read.table("Popcoord.txt", header=TRUE, stringsAsFactor=FALSE)
pop <- read.table("Popcoord.txt", header=TRUE, stringsAsFactor=FALSE)
pop
pop <- subset(pop, Pop%in%c("BG001", "RU008", "TR001", "CA001", "US001", "US003" ))
pop
pop$Origin <- "Native"
pop[pop$Pop%in%c(""CA001", "US001", "US003"")]$Origin <- "Invasive"
pop[pop$Pop%in%c("CA001", "US001", "US003")]$Origin <- "Invasive"
pop[pop$Pop%in%c("CA001", "US001", "US003"),]$Origin <- "Invasive"
pop
pop$Pop <- as.factor(pop$Pop)
pop$Origin <- as.factor(pop$Origin)
pop$Latitude <- as.numeric(pop$Latitude)
pop$Longitude <- as.numeric(pop$Longitude)
pop$pch <- 1 #for invasives
pop[pop$Origin %in% "nat",]$pch <- 17
pop[pop$Origin %in% "Native",]$pch <- 17
library(rgdal) # Commands for reprojecting the vector data.
library(rworldmap) # Recently updated mapping program.
library(rworldxtra) # Add-ons for rworldmap.
projectionCRS <- CRS("+proj=laea +lon_0=0.001 +lat_0=89.999 +ellps=sphere") #the ellps 'sphere' has a radius of 6370997.0m
par(mai=c(0,0,0.2,0)) #,xaxs="i",yaxs="i"
sPDF <- getMap()[-which(getMap()$ADMIN=='Antarctica')]
sPDF <- spTransform(sPDF, CRS=projectionCRS)
setLims <- TRUE #FALSE back to whole world
#setLims <- FALSE
if ( !setLims )
{
xlim <- ylim <- NA
} else
{
### TRY FIDDLING WITH THESE LIMITS ###
xlimUnproj <- c(-52,120)
ylimUnproj <- c(10,30)
sPointsLims <- data.frame(x=xlimUnproj, y=ylimUnproj)
coordinates(sPointsLims) = c("x", "y")
proj4string(sPointsLims) <- CRS("+proj=longlat +ellps=WGS84")
sPointsLims <- spTransform(sPointsLims, CRS=projectionCRS)
xlim <- coordinates(sPointsLims)[,"x"]
ylim <- coordinates(sPointsLims)[,"y"]
}
# sPDF <- getMap()
# #list of country names
# sPDF$ADMIN
#setup a color code column filled with numbers
sPDF$colCode <- 4
#set codes for specified countries
sPDF$colCode[ which(sPDF$ADMIN %in% c("Canada","United States of America"))] <- 1
sPDF$colCode[ which(sPDF$ADMIN %in% c("Armenia","Azerbaijan", "Bulgaria", "Georgia",
"Greece", "Moldova", "Romania","Russia", "Turkey",
"Ukraine", "Serbia"))] <- 2
sPDF$colCode[ which(sPDF$ADMIN %in% c("Poland", "Belarus", "Italy", "Syria", "Czech Republic",
"Estonia", "Switzerland","Latvia","Lithuania",
"Slovenia", "Serbia","Austria","Belgium", "France",
"Germany","Hungary","Luxembourg","Norway","Slovakia",
"Spain", "United Kingdom", "Kazakhstan", "Turkmenistan", "China"))] <- 3
#create a colour palette - note for each value not for each country
colourPalette <- c("#F8766D","#00BFC4", "cadetblue","lightgray") #inv, nat, present/naturalized, extra countries
coordinates(pop) = c("Longitude", "Latitude")
proj4string(pop) <- CRS("+proj=longlat +ellps=WGS84")
sPointsDF <- spTransform(pop, CRS=projectionCRS)
markings <- data.frame(Latitude=as.numeric(c(75,60,45,30,15,85,85)), Longitude=as.numeric(c(-45,-45,-45,-45,-45,0,180)),name=c("75", "60","45","30","15","0","180"))
coordinates(markings) = c("Longitude", "Latitude")
proj4string(markings) <- CRS("+proj=longlat +ellps=WGS84")
sPointsDFmark <- spTransform(markings, CRS=projectionCRS)
png("Cdif_exprMap.png", width=665, height = 500, pointsize = 12)
# svg("KTurnerFig1.svg", width=6.65, height = 5, pointsize = 12)
par(mar=c(0,0,0,0))
mapCountryData(sPDF, nameColumnToPlot="colCode", mapTitle=NA,
colourPalette=colourPalette, borderCol ='gray24', addLegend = FALSE,
xlim=xlim, ylim=ylim, catMethod=c(0,1,2,3,4))
#note that catMethod defines the breaks and values go in a category if they are <= upper end
#mapTitle=bquote(Global~range~of~italic(Centaurea)~italic(diffusa))
points(sPointsDF, pch=pop$pch, cex=1.2, lwd=2)
llgridlines(sPDF, easts=c(-90,-180,0,90,180), norths=seq(0,90,by=15),
plotLabels=FALSE, ndiscr=1000) #ndiscr=num points in lines
text(sPointsDFmark, labels = sPointsDFmark$name, cex=1) #pch2 for triangles
legend("topright", c("Invasive C. diffusa","Native C. diffusa", "Experimental field"),
pch=c(1,17,8),  bg="white", title = "Sampled populations", cex=1)
legend("bottomleft", c("Invasive", "Native","Naturalized"), fill=colourPalette,
title="Ranges of C. diffusa", bg="white", cex=1)
box(lty="solid", col = "black")
dev.off()
png("Cdif_exprMap.png", width=665, height = 500, pointsize = 12)
# svg("KTurnerFig1.svg", width=6.65, height = 5, pointsize = 12)
par(mar=c(0,0,0,0))
mapCountryData(sPDF, nameColumnToPlot="colCode", mapTitle=NA,
colourPalette=colourPalette, borderCol ='gray24', addLegend = FALSE,
xlim=xlim, ylim=ylim, catMethod=c(0,1,2,3,4))
#note that catMethod defines the breaks and values go in a category if they are <= upper end
#mapTitle=bquote(Global~range~of~italic(Centaurea)~italic(diffusa))
points(sPointsDF, pch=pop$pch, cex=2, lwd=2)
llgridlines(sPDF, easts=c(-90,-180,0,90,180), norths=seq(0,90,by=15),
plotLabels=FALSE, ndiscr=1000) #ndiscr=num points in lines
text(sPointsDFmark, labels = sPointsDFmark$name, cex=1) #pch2 for triangles
legend("topright", c("Invasive C. diffusa","Native C. diffusa"),
pch=c(1,17),  bg="white", title = "Sampled populations", cex=1)
legend("bottomleft", c("Invasive", "Native","Naturalized"), fill=colourPalette,
title="Ranges of C. diffusa", bg="white", cex=1)
box(lty="solid", col = "black")
dev.off()
library(rgdal) # Commands for reprojecting the vector data.
library(rworldmap) # Recently updated mapping program.
library(rworldxtra) # Add-ons for rworldmap.
projectionCRS <- CRS("+proj=laea +lon_0=0.001 +lat_0=89.999 +ellps=sphere") #the ellps 'sphere' has a radius of 6370997.0m
par(mai=c(0,0,0.2,0)) #,xaxs="i",yaxs="i"
sPDF <- getMap()[-which(getMap()$ADMIN=='Antarctica')]
sPDF <- spTransform(sPDF, CRS=projectionCRS)
setLims <- TRUE #FALSE back to whole world
#setLims <- FALSE
if ( !setLims )
{
xlim <- ylim <- NA
} else
{
### TRY FIDDLING WITH THESE LIMITS ###
xlimUnproj <- c(-52,120)
ylimUnproj <- c(10,30)
sPointsLims <- data.frame(x=xlimUnproj, y=ylimUnproj)
coordinates(sPointsLims) = c("x", "y")
proj4string(sPointsLims) <- CRS("+proj=longlat +ellps=WGS84")
sPointsLims <- spTransform(sPointsLims, CRS=projectionCRS)
xlim <- coordinates(sPointsLims)[,"x"]
ylim <- coordinates(sPointsLims)[,"y"]
}
# sPDF <- getMap()
# #list of country names
# sPDF$ADMIN
#setup a color code column filled with numbers
sPDF$colCode <- 4
#set codes for specified countries
sPDF$colCode[ which(sPDF$ADMIN %in% c("Canada","United States of America"))] <- 1
sPDF$colCode[ which(sPDF$ADMIN %in% c("Armenia","Azerbaijan", "Bulgaria", "Georgia",
"Greece", "Moldova", "Romania","Russia", "Turkey",
"Ukraine", "Serbia"))] <- 2
sPDF$colCode[ which(sPDF$ADMIN %in% c("Poland", "Belarus", "Italy", "Syria", "Czech Republic",
"Estonia", "Switzerland","Latvia","Lithuania",
"Slovenia", "Serbia","Austria","Belgium", "France",
"Germany","Hungary","Luxembourg","Norway","Slovakia",
"Spain", "United Kingdom", "Kazakhstan", "Turkmenistan", "China"))] <- 3
#create a colour palette - note for each value not for each country
colourPalette <- c("#F8766D","#00BFC4", "cadetblue","lightgray") #inv, nat, present/naturalized, extra countries
pop <- read.table("Popcoord.txt", header=TRUE, stringsAsFactor=FALSE)
pop <- subset(pop, Pop%in%c("BG001", "RU008", "TR001", "CA001", "US001", "US003" ))
pop$Origin <- "Native"
pop[pop$Pop%in%c("CA001", "US001", "US003"),]$Origin <- "Invasive"
pop$Pop <- as.factor(pop$Pop)
pop$Origin <- as.factor(pop$Origin)
pop$Latitude <- as.numeric(pop$Latitude)
pop$Longitude <- as.numeric(pop$Longitude)
pop$pch <- 1 #for invasives
pop[pop$Origin %in% "Native",]$pch <- 17
coordinates(pop) = c("Longitude", "Latitude")
proj4string(pop) <- CRS("+proj=longlat +ellps=WGS84")
sPointsDF <- spTransform(pop, CRS=projectionCRS)
#lat markings...
markings <- data.frame(Latitude=as.numeric(c(75,60,45,30,15,85,85)), Longitude=as.numeric(c(-45,-45,-45,-45,-45,0,180)),name=c("75", "60","45","30","15","0","180"))
coordinates(markings) = c("Longitude", "Latitude")
proj4string(markings) <- CRS("+proj=longlat +ellps=WGS84")
sPointsDFmark <- spTransform(markings, CRS=projectionCRS)
pdf("Cdif_exprFig1.pdf", useDingbats=FALSE, width=6.85, height = 5, pointsize = 12) #4.4 or 6.65
par(mar=c(0,0,0,0))
mapCountryData(sPDF, nameColumnToPlot="colCode", mapTitle=NA,
colourPalette=colourPalette, borderCol ='gray24', addLegend = FALSE,
xlim=xlim, ylim=ylim, catMethod=c(0,1,2,3,4))
#note that catMethod defines the breaks and values go in a category if they are <= upper end
#mapTitle=bquote(Global~range~of~italic(Centaurea)~italic(diffusa))
points(sPointsDF, pch=pop$pch, cex=2, lwd=2)
llgridlines(sPDF, easts=c(-90,-180,0,90,180), norths=seq(0,90,by=15),
plotLabels=FALSE, ndiscr=1000) #ndiscr=num points in lines
text(sPointsDFmark, labels = sPointsDFmark$name, cex=1) #pch2 for triangles
legend("topright", c("Invasive C. diffusa","Native C. diffusa"),
pch=c(1,17),  bg="white", title = "Sampled populations", cex=1)
legend("bottomleft", c("Invasive", "Native","Naturalized"), fill=colourPalette,
title="Ranges of C. diffusa", bg="white", cex=1)
box(lty="solid", col = "black")
dev.off()
library(plyr)
library(ggplot2)
dat<- read.table("BSfig_data.txt", header=T, sep="\t",quote='"', row.names=1) #"BSfig_data.txt"
rnorm(n=20, m=1, sd=0.25)
size_decr <- c(rnorm(n=20, m=2, sd=0.25),rnorm(n=20, m=1, sd=0.25))
tol_incr <- c(rnorm(n=20, m=2, sd=0.25),rnorm(n=20, m=3, sd=0.25))
dat_incrTol <- subset(dat, Group%in%c("Native", "Invasive A"))
dat_incrTol$ControlSize <- size_decr
dat_incrTol$StressTolerance <- tol_incr
colnames(dat_incrTol)[1] <- "Range"
pTradeTol <- ggplot(dat_incrTol,aes(x=StressTolerance, y=ControlSize)) +
geom_point(aes(shape=Range, color=Range), size=4)+
geom_smooth(method=glm, se=TRUE,color="black", size=2 )+
#   coord_cartesian(ylim = c(0, 4), xlim= c(0, 4)) +
theme_bw()+
theme(axis.ticks = element_blank(), axis.text = element_blank())+
xlab("Breadth of environmental tolerance") +
ylab("Magnitude of expression response to drought") +
#   annotate(geom="text", x=1.5, y=2.4, label="(b)",fontface="bold", size=3)+
theme(legend.justification=c(0.95,0.95), legend.position=c(1,1),
legend.title = element_text(size=12, face="bold"),
legend.text = element_text(size = 12))
pTradeTol
pdf("Cdifexpr_Fig4.pdf", useDingbats=FALSE, width=3.3, height=3.3, pointsize = 16) #MolEcol sizes 3.149, 4.4 or 6.65; Biol Inv 1.53, 3.3, 5.05, 6.85
pTradeTol
dev.off()
pdf("Cdifexpr_Fig4.pdf", useDingbats=FALSE, width=3.3, height=3.3, pointsize = 16) #MolEcol sizes 3.149, 4.4 or 6.65; Biol Inv 1.53, 3.3, 5.05, 6.85
pTradeTol
dev.off()
pTradeTol <- ggplot(dat_incrTol,aes(x=StressTolerance, y=ControlSize)) +
geom_point(aes(shape=Range, color=Range), size=4)+
geom_smooth(method=glm, se=TRUE,color="black", size=2 )+
#   coord_cartesian(ylim = c(0, 4), xlim= c(0, 4)) +
theme_bw()+
theme(axis.ticks = element_blank(), axis.text = element_blank())+
xlab("Breadth of environmental tolerance") +
ylab("Magnitude of response to drought") +
#   annotate(geom="text", x=1.5, y=2.4, label="(b)",fontface="bold", size=3)+
theme(legend.justification=c(0.95,0.95), legend.position=c(1,1),
legend.title = element_text(size=12, face="bold"),
legend.text = element_text(size = 12))
pdf("Cdifexpr_Fig4.pdf", useDingbats=FALSE, width=3.3, height=3.3, pointsize = 16) #MolEcol sizes 3.149, 4.4 or 6.65; Biol Inv 1.53, 3.3, 5.05, 6.85
pTradeTol
dev.off()
