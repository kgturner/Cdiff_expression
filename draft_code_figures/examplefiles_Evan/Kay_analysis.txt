Sunflower experiment:

Type
Treatment
Time
Type*Time
Treatment*Time
Treatment*Type
Type*Treatment*Time 

Sample (replicated in each treatment, nested in Population)
Population (nested in Type)

Forget about higher order random interactions

Test three way interaction first - remove genes with significant interaction
Test two way and remove those
Test single factors

Make sure your nested samples have unique names (check google groups for nesting information)



#example with ragweed
#Test interaction:
#int_tab -> rest tab = /Final_analysis/tab/*.tab
#int_tab -> rest perm = Final_analysis/tab/*.perm

#screen crunch10 int

library(maanova,lib.loc='~/R/x86_64-redhat-linux-gnu-library/2.10')
fexprs <-read.table("maanova/fexprs", header=TRUE)
write.table(fexprs,"fexprs_tab",sep="\t",row=F,quote=F)
madfull<-read.madata(datafile="~/fexprs_tab", designfile="~/names2", probeid=0, intensity=1) 

fit.fix=fitmaanova(madfull, formula=~Range+Treatment+Range:Treatment+Population+Sample, random=~Population+Sample) 

test.full=matest(madfull, fit.fix, term="Range:Treatment", n.perm=1,shuffle.method="sample",verbose=TRUE)


names<-read.table("maanova/names", header=TRUE)
#get means for Range
MeansRange = t(apply(madfull$data, 1, tapply, names$Range, mean)) 
colnames(MeansRange)=paste("Mean", colnames(MeansRange), sep=":")

#get means for Treatment
MeansTreatment = t(apply(madfull$data, 1, tapply, names$Treatment, mean)) 
colnames(MeansTreatment)=paste("Mean", colnames(MeansTreatment), sep=":")

#get SE for Range
SERange = t(apply(madfull$data, 1, tapply, names$Range, function(x) sqrt(var(x)/length(x))))
colnames(SERange)=paste("SE", colnames(SERange), sep=":")

#get SE for Treatment
SETreatment = t(apply(madfull$data, 1, tapply, names$Treatment, function(x) sqrt(var(x)/length(x))))
colnames(SETreatment)=paste("SE", colnames(SETreatment), sep=":")



# Log differences between range overall okay as not going to graph log diff and interaction
Range=matrix((MeansRange[,1]-MeansRange[,2]), ,1)


# Bind columns into a matrix
logDiffs=Range


logdiff2FC=function(x, base=2) {
  # Transforms x from a log difference (logdiff) to a fold change (FC) scale
  # logdiff is the expression difference in log scale of base = 'base'
  # FC is the ratio between two expression values in the original scale
  # The absolute value of the returned FC is always greater than or equal to 1
  # The sign is kept to indicate direction of change
  # When the the log difference is 0, the FC is always 1.
  signs = sign(x)
  out   = base^abs(x)
  if(any(x==0)) {
    out[x==0] = 1
  }
  return(out*signs)
} # logdiff2FC


# Transform log differences to FC scale
FC = apply(logDiffs, 2, logdiff2FC)

library(qvalue)
test.full=adjPval(test.full, method='jsFDR')

out = data.frame(MeansRange, SERange, F1_val=test.full$F1$Fobs, Fs_val=test.full$Fs$Fobs, P_tab=test.full$Fs$Ptab, FDR_tab=test.full$Fs$adjPtab, logDiffs=logDiffs, FC=FC)

write.table(out , file="maanova/out.IntP_tab.csv", sep=",", row.names=F)

get sig and non sig gene names and expression values for later analysis
rownames<-read.table("~/fgenes", header=TRUE) #get gene names
rowsig <- rownames[out$FDR_tab > 0.05,]
sigfexprs<-fexprs[out$FDR_tab > 0.05,]

write.table(sigfexprs,"fexprs_rangetab",sep="\t",row=F,quote=F)
write.table(rowsig,"frangetab", row=F,quote=F)

rowsig <- rownames[out$FDR_tab <= 0.05,]
sigfexprs<-fexprs[out$FDR_tab <= 0.05,]

write.table(sigfexprs,"fexprs_inttab",sep="\t",row=F,quote=F)
write.table(rowsig,"finttab", row=F,quote=F)



#1000 permutations

test.full=matest(madfull, fit.fix, term="Range:Treatment", n.perm=1000, shuffle.method="sample",verbose=TRUE)

names<-read.table("maanova/names", header=TRUE)
#get means for Range
MeansRange = t(apply(madfull$data, 1, tapply, names$Range, mean)) 
colnames(MeansRange)=paste("Mean", colnames(MeansRange), sep=":")

#get means for Treatment
MeansTreatment = t(apply(madfull$data, 1, tapply, names$Treatment, mean)) 
colnames(MeansTreatment)=paste("Mean", colnames(MeansTreatment), sep=":")

#get SE for Range
SERange = t(apply(madfull$data, 1, tapply, names$Range, function(x) sqrt(var(x)/length(x))))
colnames(SERange)=paste("SE", colnames(SERange), sep=":")

#get SE for Treatment
SETreatment = t(apply(madfull$data, 1, tapply, names$Treatment, function(x) sqrt(var(x)/length(x))))
colnames(SETreatment)=paste("SE", colnames(SETreatment), sep=":")



# Log differences 
Range=matrix((MeansRange[,1]-MeansRange[,2]), ,1)


# Bind columns into a matrix
logDiffs=Range


logdiff2FC=function(x, base=2) {
  # Transforms x from a log difference (logdiff) to a fold change (FC) scale
  # logdiff is the expression difference in log scale of base = 'base'
  # FC is the ratio between two expression values in the original scale
  # The absolute value of the returned FC is always greater than or equal to 1
  # The sign is kept to indicate direction of change
  # When the the log difference is 0, the FC is always 1.
  signs = sign(x)
  out   = base^abs(x)
  if(any(x==0)) {
    out[x==0] = 1
  }
  return(out*signs)
} # logdiff2FC


# Transform log differences to FC scale
FC = apply(logDiffs, 2, logdiff2FC)

library(qvalue)
test.full=adjPval(test.full, method='jsFDR')

out = data.frame(MeansRange, SERange, F1_val=test.full$F1$Fobs, Fs_val=test.full$Fs$Fobs,P_tab=test.full$Fs$Ptab, P_perm=test.full$Fs$Pvalperm, FDR_tab=test.full$Fs$adjPtab, FDR_perm=test.full$Fs$adjPvalperm, logDiffs=logDiffs, FC=FC)

write.table(out , file="maanova/out.IntP_perm.csv", sep=",", row.names=F)


